pipeline {
  agent any
  environment {
    BASTION_IP = credentials('bastion-ip')
    ANSIBLE_IP = credentials('ansible-ip')
  }
  stages {
    stage ('deploying to stage environment') {
      steps {
        sshagent(['ansible-key']) {
          sh '''
            ssh -t -t -o StrictHostKeyChecking=no -o ProxyCommand="ssh -W %h:%p -o StrictHostKeyChecking=no ubuntu@${BASTION_IP}" ubuntu@${ANSIBLE_IP} "ansible-playbook /home/ubuntu/playbooks/stage.yml"
          '''
        }
      }
    }
    stage ('slack notification a'){
      steps {
        slackSend channel: 'Cloudhight', message: 'New Stage Deployment', teamDomain: '24th-february-sock-shop-kubeadm-project', tokenCredentialId: 'slack'
      }
    }
    stage ('DAST Scan'){
      steps {
        sh '''
            chmod 777 $(pwd)
            docker run -v $(pwd):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t https://stage.eamanzetec.com.ng -g gen.conf -r testreport.html || true
        '''
      }
    }
    stage ('prompt for approval'){
      steps {
        timeout(activity: true, time: 5) {
          input message: 'Review before approval', submitter: 'admin'
        }
      }
    }
    stage ('deploying to prod environment') {
      steps {
        sshagent(['ansible-key']) {
          sh '''
            ssh -t -t -o StrictHostKeyChecking=no -o ProxyCommand="ssh -W %h:%p -o StrictHostKeyChecking=no ubuntu@${BASTION_IP}" ubuntu@${ANSIBLE_IP} "ansible-playbook /home/ubuntu/playbooks/prod.yml"
          '''
        }
      }
    }
    stage ('slack notification b'){
      steps {
        slackSend channel: 'Cloudhight', message: 'New Production Deployment', teamDomain: '24th-february-sock-shop-kubeadm-project', tokenCredentialId: 'slack'
      }
    }
  }
}
