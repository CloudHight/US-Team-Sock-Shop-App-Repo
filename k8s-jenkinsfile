pipeline{
    agent any
    environment {
        BASTION_HOST = credentials('bastion-host')
        HAPROXY_HOST = credentials('haproxy-host')
    }
    stages {

        stage('Deploy to stage environment') {
            steps {
              sshagent(['jumpbox-key']) {
                sh 'ssh -o StrictHostKeyChecking=no -J ubuntu@$BASTION_HOST ubuntu@$HAPROXY_HOST "kubectl apply -f https://raw.githubusercontent.com//CloudHight/US-Team-Sock-Shop-App-Repo/blob/main/deploy/kubernetes/staging-complete.yaml"'
              }
            }
        }
        stage('check stage website availability') {
            steps {
                 sh "sleep 90"
                 sh "curl -s -o /dev/null -w \"%{http_code}\" https://stage.hullerdata.com"
                script {
                    def response = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" https://stage.hullerdata.com", returnStdout: true).trim()
                    if (response == "200") {
                        slackSend(color: 'good', message: "The stage petclinic java application is up and running with HTTP status code ${response}.", tokenCredentialId: 'slack')
                    } else {
                        slackSend(color: 'danger', message: "The stage petclinic java application appears to be down with HTTP status code ${response}.", tokenCredentialId: 'slack')
                    }
                }
            }
        }
        stage('Request for Approval') {
            steps {
                timeout(activity: true, time: 10) {
                    input message: 'Needs Approval ', submitter: 'admin'
                }
            }
        }

        stage('Deploy to prod env') {
            steps {

                sshagent(['jumpbox-key']) {
                    sh 'ssh -o StrictHostKeyChecking=no -J ubuntu@$BASTION_HOST ubuntu@$HAPROXY_HOST "kubectl apply -f https://raw.githubusercontent.com/CloudHight/US-Team-Sock-Shop-App-Repo/blob/main/deploy/kubernetes/prod-complete.yaml"'
                }
            }
        }
        stage('check prod website availability') {
            steps {
                 sh "sleep 90"
                 sh "curl -s -o /dev/null -w \"%{http_code}\" https://app.hullerdata.com"
                script {
                    def response = sh(script: "curl -s -o /dev/null -w \"%{http_code}\" https://app.hullerdata.com", returnStdout: true).trim()
                    if (response == "200") {
                        slackSend(color: 'good', message: "The prod petclinic java application is up and running with HTTP status code ${response}.", tokenCredentialId: 'slack')
                    } else {
                        slackSend(color: 'danger', message: "The prod petclinic java application appears to be down with HTTP status code ${response}.", tokenCredentialId: 'slack')
                    }
                }
            }
        }
    }
}
